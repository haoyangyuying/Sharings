## [Ruby on Rails を使ったサービス開発と組織（ブラケット × みんなのウェディング）](https://mwed.connpass.com/event/64633/)

### 前置き
- チーム開発の話
- 新卒の育成
- 会社説明

### みんなのウェディング
- 会社説明2017
  - みんなの大切の日をスローガンにしている
  - サービス：結婚式場探し、婚活カレンダー、partynote
  - 社内外活動：入社式、社員旅行、MVP表彰、社内、社外勉強会
  - 技術イベント：rails girls、ruby kaigi、ginza.rb
  - 利用サービス：esa aws
  - エンジニア：アプリエンジニア、インフラエンジニア
  - 開発プロセスを短く：スプリント計画、朝会などやっている

### Bracket
- サービス名：stores.jp
- 発表者：＠acairojuni
- 強み：２分でonline storeを作れる、mailがあればstore公開まで2分、管理画面が使いやすい
- 新機能：電子チケットが簡単に販売できる(もぎる機能)
- 新しくなったニュース機能：お知らせから読み物のように
- 国内3大キャリア決済対応

##＃ stores.jp
- 発表者：@tyabe
- 2012年08月からスタートしたサービス、今はユーザー数が順調増え
- 一時zozomarket子会社が、今は単独存在する
- 2015年8月から黒字
- 開発：Ruby on rails
- 201208~20107
  - 2012.05.09初コミット
  - とにかく新しい機能を量産
  - 一年間で4人
  - とにかく速くサービスだす(code reviewなし)
- 201308~201412
  - 外部サービス連携、モバオク
  - 一機能が1人で担当
  - slackで各種事項相談
  - 開発4~9~3人、デザイナ2名
  - 月末に全社員参加の”レビュー会”(数値と今後の展望)
  - もくもく会があって、最後に成果を発表する
- 201501~201601
  - サービスを安定的に提供する
  - 開発者は5名、デザイナは１名
  - stores.jpリニューアル、(ユーザーページ)を全面的に作り替えました
  - 問合せ、調査、リニューアル合宿(集団リモート)
  - 朝会・夕会を定期的にする
  - 週一回の振り返り(開発デザイナのみ)
- 201501~201601
  - ブランチ運用方法の規定(gitフロー, githubフロー)
  - コードレビューを活発にする
  - qiita:team導入(開発用ドキュメント以外に日報や障害報告)
  - 他チームと関係性が変わってきた時期
- 201601~201609
  - zozomarketでフリマプロジェクト1月のリリース以降大忙しい
  - 開発5~3~4名、デザイナ：1~2名
  - storesのオペレーションの負荷がとにかくやばい
  - 取り合わせ管理ページの改修、なるべく一手がかからないようにする
  - コードの見直しを行い作業
- 201610~201708
  - MBO体制変更
  - 開発4~6名、デザイナ2名
  - パフォーマンス改善プロジェクト、運用・保守チーム分けの実験、ランチミーティング、週一回の開発者会議、1on1
  - 問合せ対応：対応できる人を増やしていく
  - 1人でローティションではなく、チームで回す
  - ランチミーティング：LTなど、最近きになる技術とかを話す
  - やりたいこと：運用が楽になる、チェレンジしやすい体制、インフラやコードベースを良い感じに整備したい
  - 開発チームの意見を大切にする、開発しやい組織
  - 人が足りない

### インフラエンジニアとアプリ開発
- インフラエンジニアやること：ネットワーク構築、サーバ構築、構築したシステムを監視
- 本番開発環境の構築管理(docker、itamae)、ログの収集、分析(fluentd)
- modbasifからrailsへの移行期間
- 基盤運用redshift
- mobasif フレームワーク(perlで書かれて、見通しが良い)、使う理由は、昔denaの社内プロジェクト
- トラブルが多い、常にある程度バッファーを持って仕事する
- アプリケーションエンジニアに相談されることがあるので、対応できるように情報収集する
- インフラエンジニア：目に見える形でサービスに影響することがない、止めたら怒る
- アプリ側にも手を出す
  - アプリの性能改善
    - スロークエリの解消
    - 最初はexplainさえ知らないが、改善後の成果は1/60になった
  - アーキテクチャーの改善
    - mobasifでは自作のプログラムをデーモン化する
    - supervisorを利用し改善
    - foregroundで動いている必要, デーモン化ツール
    - もともとデーモン化されているプログラムをforegroundで動かせる
  - railsチュートリアル、CI周りに手を出す
  - アプリ側
    - インフラを学ぶ
      - 検証用のAWSのアカウントを作る(月$500で、assumeroleを利用する)
- まとめ：devとopsの相互理解、インフラエンジニアはアプリのことを学ぶ、アプリケーションエンジニア

### 開発速度を上げていくための環境の変化
- 再入社
- ブラケットの日々の開発
  - 現在はエンジニア6人、他のコミュニケーションの参考に
  - 担当範囲：仕様の議論に加わる
  - 仕様を考える、調整する、決めるのもエンジニアの仕事
  - 仕様決め開発設計、実装、リリース、運用
  - 全部やるので、1案件に1担当になる
  - 仕様の理論：担当者以外は仕様を知らない → googleで情報共有 → qiita:Team様々なドキュメント、全チーム閲覧可能、仕様やデザインについての活発な議論、wipも議論
  - 行単位でコメントできるので、最近dropbox paperを利用開始
- 話題：
  - どのようなツールを使っているのか
  - 歴史、変遷、これからの試み
  - ゆるさを残す、編集履歴、経緯
  - wipの文化：草案でいいからどんどん公開してもらう
- 開発の設計
  - pull requestが上げられてコードレビュ
  - 必ず設計を公開、影響範囲を明確する(行単位でのコメント)
  - コードにまつわることはgithubで管理した方が関連性が高い
- 担当は1人
  - 設計レビュ-というフェーズを作りたい
  - 設計フェーズがあればタスクの分解が事前に可能
- 課題管理：
  - redmine: とりあえず蓄積、ルールが定まらず複雑になっていった
  - trelloで利用、一目でわかりやすい、何を誰が進行中がわかりやすい
  - issue管理：github issue
    - 全社員がアカウントを持つように
    - 改善要望、調査依頼、といあわせ対応
-　サービス監視
  - AWSを利用
  - newrelic
  - aws cloud watch
  - slackにグラフ付きで追加される
  - 5××エラー監視
  - elasticsearchを利用
    - elastic cloud
    - 画像変換：imageflux；画像や料金ど現状と変わらない、バージョンアップ対応などから解放
    - バグトラッキングAPP：Heroku
      - errbitをしよう、herokuに構築、MongoDBなど必要なインフラもheroku
- 開発設計、交流：qiita team
- 課題管理github
- 外部利用：imageflux elastic cloud heroku

- mixpanel利用理由：google analyticsの解析すら不十分
- ABテスト：Optimizely
  - 最初の2年くらいはABテスト
  - 細かいな改善を試すより新機能の開発を優先
  - そもそもの訪問数を増やす方が優先
  - 知名度を上げることに注力
  - stores.jp5周年、これからこまかい改善をしていく


### 新卒研修と初めてのRails開発
- フロント周りしか触ってことがない
- 新卒研修：ビジネスマナー研修、技術研修、railsか移行業務
- 技術研修： ハッシュロケット、英語
- relish stack over flow
- 公式ドキュメントに向き合う
- サービス作れるようになった(web security, rspec, haml/sass, テーブル設計、オブジェクト思考設計)
- アイディア出し→レビュー→設計→実装
  - テーブル設計
  - tagを検索する
- rails移行業務
  - commit細かくコミットを切る分ける wipなどのコミットをまとめる
  - wipのコミットから合体
- 小さなプルリクエスト
- チーム：KPT法(keep problem try)
- 振り返り：目的を設定する、開発効率の改善
  - tryの質：お互いにレビュー(10分)
- ペアプロ
  - 30分間で自分で解決
  - 知見共有、タスクを進める、先輩を見て学ぶ、進捗感
- 正しい情報を学ぶ、一度学んだことを復習する、質問をする、周り(プルリクエスト)をみる



## Q&A
- erribit利用理由：無料、herokuからエラーをとってみるので、取りこぼすがあるけど、移行する考えはない
- 新しく開発者に出す課題：(中途)設計とか、(b)(中途)今まで、どうあった、どう判断しているのか
- 外部サービス責任が取れないが、どうお考えですか
  - すぐにokay出してくれないなら、料金、メリット提案する
  - qiitaでだして、まとめる；経営層がエンジニアを信頼、いつも議論できるようにする
- (みんなのウェディン)マネジャーサービスを使っている→人件費を削減できる
- 機密情報がない、外に出せないとかあれば考慮しなければならないかも
- もくもく会成果
  - 数週間で成果を発表、個人がslack newsのチャネルでアップする
